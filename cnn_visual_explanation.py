"""
CNN网络结构简化图解 - 文本版可视化
帮助理解深层卷积神经网络的工作原理
"""

def print_cnn_architecture():
    """用ASCII艺术展示CNN架构"""
    
    print("=" * 100)
    print("🧠 深层CNN手势识别网络架构图解")
    print("=" * 100)
    
    print("\n📸 输入阶段:")
    print("┌─────────────────┐")
    print("│   原始手势图片   │ ← 用户拍摄的照片")
    print("│   (224×224×3)   │ ← RGB三通道彩色图像")
    print("└─────────────────┘")
    print("         ↓")
    
    print("\n🔍 特征提取阶段 (卷积层):")
    
    # 第一个卷积块
    print("┌─────────────────┐")
    print("│   卷积块 1      │ ← 检测边缘、线条")
    print("│ Conv: 3→32通道  │ ← 使用32个3×3卷积核")
    print("│ 输出:(32,112,112)│ ← BatchNorm + ReLU + 池化")
    print("└─────────────────┘")
    print("         ↓")
    
    # 第二个卷积块  
    print("┌─────────────────┐")
    print("│   卷积块 2      │ ← 组合边缘成形状")
    print("│ Conv: 32→64通道 │ ← 识别角度、曲线")
    print("│ 输出:(64,56,56) │ ← 特征图尺寸减半")
    print("└─────────────────┘")
    print("         ↓")
    
    # 第三个卷积块
    print("┌─────────────────┐")
    print("│   卷积块 3      │ ← 识别复杂模式")
    print("│ Conv: 64→128通道│ ← 手指、手掌轮廓")
    print("│ 输出:(128,28,28)│ ← 更抽象的特征")
    print("└─────────────────┘")
    print("         ↓")
    
    # 第四个卷积块
    print("┌─────────────────┐")
    print("│   卷积块 4      │ ← 理解整体手势")
    print("│ Conv: 128→256通道│ ← 语义级别理解")
    print("│ 输出:(256,14,14)│ ← 高级抽象特征")
    print("└─────────────────┘")
    print("         ↓")
    
    print("\n🎯 分类决策阶段 (全连接层):")
    
    # 展平层
    print("┌─────────────────┐")
    print("│     展平层      │ ← 4D张量→1D向量")
    print("│   (50176,)      │ ← 256×14×14=50176")
    print("└─────────────────┘")
    print("         ↓")
    
    # 全连接层
    print("┌─────────────────┐")
    print("│   全连接层 1    │ ← 特征整合")
    print("│   50176→512     │ ← 2500万个参数!")
    print("└─────────────────┘")
    print("         ↓")
    
    print("┌─────────────────┐")
    print("│   全连接层 2    │ ← 特征压缩")
    print("│    512→256      │ ← 去除冗余信息")
    print("└─────────────────┘")
    print("         ↓")
    
    print("┌─────────────────┐")
    print("│   全连接层 3    │ ← 特征精炼")
    print("│    256→128      │ ← 最重要特征")
    print("└─────────────────┘")
    print("         ↓")
    
    # 输出层
    print("┌─────────────────┐")
    print("│     输出层      │ ← 最终分类")
    print("│     128→3       │ ← 石头/剪刀/布")
    print("└─────────────────┘")
    
    print("\n🎯 输出结果:")
    print("┌─────────────────┐")
    print("│ [0.1, 0.2, 0.7] │ ← 三个概率值")
    print("│   石头 剪刀 布  │ ← 0.7最大,预测为'布'")
    print("└─────────────────┘")

def explain_convolution_step_by_step():
    """详细解释卷积操作"""
    
    print("\n" + "=" * 80)
    print("🔍 卷积操作详细解释 - 以第一层为例")
    print("=" * 80)
    
    print("\n步骤1: 输入图像")
    print("一张224×224的彩色图片,有3个通道(红绿蓝):")
    print("图像[像素位置][颜色通道] = 像素值(0-255)")
    
    print("\n步骤2: 卷积核(滤波器)")
    print("我们有32个不同的3×3×3卷积核:")
    print("""
    卷积核1:     卷积核2:     ...    卷积核32:
    [1  0 -1]    [1  1  1]           [0  1  0]
    [1  0 -1]    [0  0  0]    ...    [1  1  1]  
    [1  0 -1]    [-1-1-1]           [0  1  0]
    (检测竖直边缘) (检测水平边缘)      (检测十字形)
    """)
    
    print("\n步骤3: 卷积运算")
    print("每个卷积核在图像上滑动,计算对应位置的特征:")
    print("""
    原图像区域:        卷积核:          计算过程:
    [100 150 200]     [1  0 -1]       100×1 + 150×0 + 200×(-1)
    [120 180 210]  ×  [1  0 -1]   =   120×1 + 180×0 + 210×(-1) 
    [110 160 190]     [1  0 -1]       110×1 + 160×0 + 190×(-1)
                                    = 100-200 + 120-210 + 110-190
                                    = -370 (检测到强烈的边缘!)
    """)
    
    print("\n步骤4: 得到特征图")
    print("32个卷积核产生32个特征图,每个特征图检测不同的特征:")
    print("特征图1: 检测竖直边缘的强度")
    print("特征图2: 检测水平边缘的强度") 
    print("...")
    print("特征图32: 检测特定模式的强度")

def explain_why_deep_network():
    """解释为什么需要深层网络"""
    
    print("\n" + "=" * 80)
    print("❓ 为什么需要这么多层?")
    print("=" * 80)
    
    print("\n🎯 层次化特征学习 - 就像人类认识世界:")
    
    print("\n👶 婴儿阶段 (第1层卷积):")
    print("  只能看到: 明暗变化、边缘、线条")
    print("  就像: '这里有条线', '这里颜色不一样'")
    
    print("\n🧒 儿童阶段 (第2层卷积):")
    print("  能看到: 角度、简单形状、纹理")
    print("  就像: '这些线组成了一个角', '这是个圆形'")
    
    print("\n👦 少年阶段 (第3层卷积):")
    print("  能看到: 复杂形状、局部结构")
    print("  就像: '这看起来像个手指', '这是手掌的一部分'")
    
    print("\n🧑 成年阶段 (第4层卷积):")
    print("  能理解: 完整的语义概念")
    print("  就像: '这是一个完整的手势', '手指呈这种形状'")
    
    print("\n🎓 专家阶段 (全连接层):")
    print("  能判断: 基于所有信息做出决策")
    print("  就像: '综合所有特征,这应该是石头/剪刀/布'")

def explain_training_process():
    """解释训练过程"""
    
    print("\n" + "=" * 80)
    print("🎓 网络是如何学习的?")
    print("=" * 80)
    
    print("\n🏫 就像教小孩识别手势:")
    
    print("\n步骤1: 准备教材")
    print("📚 收集大量手势照片,每张都标注正确答案")
    print("   - 1000张石头照片,标签='石头'")
    print("   - 1000张剪刀照片,标签='剪刀'") 
    print("   - 1000张布照片,标签='布'")
    
    print("\n步骤2: 开始考试")
    print("📝 给网络看一张照片,让它猜是什么手势")
    print("   网络: '我猜这是石头'")
    print("   正确答案: '剪刀'")
    print("   ❌ 答错了!")
    
    print("\n步骤3: 纠正错误")
    print("🔧 调整网络内部的2600万个参数")
    print("   - 让检测'剪刀特征'的神经元更敏感")
    print("   - 让检测'石头特征'的神经元不那么敏感")
    print("   - 微调所有连接权重")
    
    print("\n步骤4: 重复练习")
    print("🔄 用3000张图片反复训练,每张图片都:")
    print("   1. 让网络猜测")
    print("   2. 告诉它正确答案")
    print("   3. 根据对错调整参数")
    print("   重复150轮,直到准确率达到95%以上!")
    
    print("\n🎯 最终结果:")
    print("✅ 网络学会了:")
    print("   - 什么样的特征组合代表'石头'")
    print("   - 什么样的特征组合代表'剪刀'")
    print("   - 什么样的特征组合代表'布'")

def show_parameter_breakdown():
    """显示参数数量分解"""
    
    print("\n" + "=" * 80)
    print("🧮 2600万参数都在哪里?")
    print("=" * 80)
    
    layers = [
        ("Conv1", "3×3×3×32", 896, "0.003%"),
        ("Conv2", "3×3×32×64", 18496, "0.07%"),
        ("Conv3", "3×3×64×128", 73856, "0.28%"),
        ("Conv4", "3×3×128×256", 295168, "1.13%"),
        ("FC1", "50176×512", 25691648, "98.1%"),
        ("FC2", "512×256", 131328, "0.5%"),
        ("FC3", "256×128", 32896, "0.13%"),
        ("FC4", "128×3", 387, "0.001%"),
    ]
    
    print(f"{'层名称':<8} {'计算公式':<15} {'参数数量':<10} {'占比':<8} {'说明'}")
    print("-" * 70)
    
    total = 0
    for name, formula, params, percent in layers:
        total += params
        if name.startswith("Conv"):
            desc = "卷积特征提取"
        else:
            desc = "全连接分类"
        print(f"{name:<8} {formula:<15} {params:<10,} {percent:<8} {desc}")
    
    print("-" * 70)
    print(f"{'总计':<8} {'':15} {total:<10,} {'100%':<8}")
    
    print(f"\n💡 关键发现:")
    print(f"   - FC1层占了98.1%的参数,是计算瓶颈!")
    print(f"   - 卷积层只占不到2%,但承担了特征提取的重任")
    print(f"   - 参数越多,网络表达能力越强,但也越容易过拟合")

def main():
    """运行所有解释"""
    print_cnn_architecture()
    explain_convolution_step_by_step()
    explain_why_deep_network()
    explain_training_process()
    show_parameter_breakdown()
    
    print("\n" + "=" * 100)
    print("🎉 总结: CNN网络就是一个'特征提取器+分类器'的组合!")
    print("=" * 100)
    
    print("""
🔍 特征提取器 (卷积层):
   就像一个有经验的侦探,能从照片中找出各种线索:
   - 第1层: 发现基础线索 (边缘、线条)
   - 第2层: 组合线索 (形状、角度)  
   - 第3层: 分析模式 (手指、手掌)
   - 第4层: 理解全貌 (完整手势)

🎯 分类器 (全连接层):
   就像一个智能法官,根据所有证据做出判决:
   - FC1: 收集所有证据
   - FC2: 筛选重要证据
   - FC3: 关注关键证据
   - FC4: 做出最终判决 (石头/剪刀/布)

🚀 训练过程:
   就像培养一个专家,通过大量练习让网络变聪明:
   - 看图猜答案 → 对比正确答案 → 调整内部参数
   - 重复成千上万次,直到变成手势识别专家!
   
🎯 最终目标:
   输入任意手势照片 → 输出正确的识别结果!
    """)

if __name__ == "__main__":
    main()
