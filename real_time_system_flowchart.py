"""
实时手势检测系统流程图解 - 文本版可视化
详细展示从摄像头输入到结果显示的完整流程
"""

def show_system_architecture():
    """显示系统整体架构"""
    
    print("=" * 100)
    print("🏗️ 实时手势检测系统架构图")
    print("=" * 100)
    
    print("""
    ┌─────────────────────────────────────────────────────────────────────────────────┐
    │                           实时手势识别系统架构                                    │
    └─────────────────────────────────────────────────────────────────────────────────┘
    
    📱 硬件层                    🧠 算法层                    🖥️ 界面层
    ┌─────────────┐            ┌─────────────┐            ┌─────────────┐
    │   摄像头    │ ────────── │  CNN模型    │ ────────── │  检测结果   │
    │ (实时视频)  │            │ (深度学习)  │            │ (可视化UI)  │
    └─────────────┘            └─────────────┘            └─────────────┘
           │                          │                          │
           ▼                          ▼                          ▼
    ┌─────────────┐            ┌─────────────┐            ┌─────────────┐
    │ 图像预处理  │            │ 时间平滑    │            │ 概率条形图  │
    │• 降噪滤波   │            │• 历史记录   │            │• 置信度显示 │
    │• 尺寸调整   │            │• 加权平均   │            │• FPS监控    │
    │• 标准化     │            │• 稳定预测   │            │• 交互控制   │
    └─────────────┘            └─────────────┘            └─────────────┘
    """)

def show_data_flow():
    """显示数据流动过程"""
    
    print("\n" + "=" * 100)
    print("📊 数据流动过程详解")
    print("=" * 100)
    
    print("""
    🎥 摄像头输入
    ├── 原始视频流 (800×600, 30fps)
    │   ├── BGR颜色格式
    │   └── numpy数组形式
    │
    ▼
    🔧 图像预处理
    ├── ROI提取 (330×330检测区域)
    ├── 高斯模糊降噪 (3×3核)
    ├── 颜色转换 (BGR→RGB)
    ├── 尺寸调整 (224×224)
    ├── 张量转换 (PIL→Tensor)
    ├── 标准化处理 (ImageNet参数)
    └── 批次维度 (1,3,224,224)
    │
    ▼
    🧠 CNN模型推理
    ├── 卷积特征提取
    │   ├── Conv1: 3→32通道 (224→112)
    │   ├── Conv2: 32→64通道 (112→56)
    │   ├── Conv3: 64→128通道 (56→28)
    │   └── Conv4: 128→256通道 (28→14)
    ├── 全连接分类
    │   ├── 展平: (256,14,14)→(50176,)
    │   ├── FC1: 50176→512
    │   ├── FC2: 512→256
    │   ├── FC3: 256→128
    │   └── FC4: 128→3
    └── Softmax概率化 [0.1, 0.2, 0.7]
    │
    ▼
    ⏱️ 时间平滑算法
    ├── 历史记录管理 (最多7帧)
    ├── 动态权重生成
    │   ├── 3帧: [0.2, 0.3, 0.5]
    │   ├── 4帧: [0.1, 0.2, 0.3, 0.4]
    │   ├── 5帧: [0.1, 0.15, 0.2, 0.25, 0.3]
    │   └── 7帧: [0.05, 0.1, 0.1, 0.15, 0.2, 0.2, 0.2]
    ├── 加权平均计算
    └── 平滑预测结果
    │
    ▼
    🎯 结果判断
    ├── 置信度阈值检查 (>75%)
    ├── 类别名称映射
    └── 状态确定 (成功/不足)
    │
    ▼
    🖼️ UI界面绘制
    ├── 检测区域标框
    ├── 半透明背景面板
    ├── 主要结果显示
    ├── 概率条形图
    ├── 置信度百分比
    ├── FPS性能监控
    └── 操作提示信息
    │
    ▼
    📺 屏幕显示
    └── 实时视频窗口输出
    """)

def show_smoothing_algorithm():
    """详细解释时间平滑算法"""
    
    print("\n" + "=" * 100)
    print("⏱️ 时间平滑算法详解")
    print("=" * 100)
    
    print("""
    🎯 算法目标: 减少单帧误识别，提高检测稳定性
    
    📝 算法步骤:
    
    步骤1: 单帧预测
    ┌─────────────────┐
    │  当前帧预测结果  │ ← CNN模型输出
    │ [0.2, 0.1, 0.7] │ ← 石头、剪刀、布概率
    └─────────────────┘
            │
            ▼
    步骤2: 历史记录更新
    ┌─────────────────────────────────────┐
    │           历史记录队列               │
    │ 帧t-2: [0.1, 0.3, 0.6]             │
    │ 帧t-1: [0.3, 0.2, 0.5]             │ ← 旧记录
    │ 帧t:   [0.2, 0.1, 0.7]             │ ← 新加入
    └─────────────────────────────────────┘
            │
            ▼
    步骤3: 权重分配 (3帧示例)
    ┌─────────────────────────────────────┐
    │         动态权重生成                 │
    │ 权重: [0.2, 0.3, 0.5]              │ ← 最新帧权重最高
    │       旧   中   新                  │
    └─────────────────────────────────────┘
            │
            ▼
    步骤4: 加权平均计算
    ┌─────────────────────────────────────┐
    │           概率加权平均               │
    │ 石头: 0.1×0.2 + 0.3×0.3 + 0.2×0.5  │
    │     = 0.02 + 0.09 + 0.10 = 0.21    │
    │                                     │
    │ 剪刀: 0.3×0.2 + 0.2×0.3 + 0.1×0.5  │
    │     = 0.06 + 0.06 + 0.05 = 0.17    │
    │                                     │
    │ 布:   0.6×0.2 + 0.5×0.3 + 0.7×0.5  │ ← 最高概率
    │     = 0.12 + 0.15 + 0.35 = 0.62    │
    └─────────────────────────────────────┘
            │
            ▼
    步骤5: 最终结果
    ┌─────────────────┐
    │  平滑后预测结果  │
    │ 类别: 布        │ ← argmax([0.21, 0.17, 0.62])
    │ 置信度: 62%     │ ← 对应概率值
    └─────────────────┘
    
    💡 算法优势:
    ✓ 抑制单帧噪声预测
    ✓ 提高识别稳定性
    ✓ 动态权重适应不同历史长度
    ✓ 保持系统响应性 (最新帧权重高)
    """)

def show_cnn_processing():
    """展示CNN处理过程"""
    
    print("\n" + "=" * 100)
    print("🧠 CNN模型处理过程")
    print("=" * 100)
    
    print("""
    📸 输入图像: (1, 3, 224, 224)
    │
    ▼ 卷积块1: 基础特征提取
    ┌─────────────────────────────────────┐
    │ Conv2d(3→32) + BatchNorm + ReLU     │ ← 检测边缘、线条
    │ MaxPool2d(2×2)                      │ ← 降采样 224→112
    │ Dropout2d(25%)                      │ ← 防过拟合
    │ 输出: (1, 32, 112, 112)             │
    └─────────────────────────────────────┘
    │
    ▼ 卷积块2: 中层特征提取
    ┌─────────────────────────────────────┐
    │ Conv2d(32→64) + BatchNorm + ReLU    │ ← 组合成形状
    │ MaxPool2d(2×2)                      │ ← 降采样 112→56
    │ Dropout2d(25%)                      │
    │ 输出: (1, 64, 56, 56)               │
    └─────────────────────────────────────┘
    │
    ▼ 卷积块3: 高层特征提取
    ┌─────────────────────────────────────┐
    │ Conv2d(64→128) + BatchNorm + ReLU   │ ← 识别复杂模式
    │ MaxPool2d(2×2)                      │ ← 降采样 56→28
    │ Dropout2d(25%)                      │
    │ 输出: (1, 128, 28, 28)              │
    └─────────────────────────────────────┘
    │
    ▼ 卷积块4: 语义特征提取
    ┌─────────────────────────────────────┐
    │ Conv2d(128→256) + BatchNorm + ReLU  │ ← 理解语义信息
    │ MaxPool2d(2×2)                      │ ← 降采样 28→14
    │ Dropout2d(30%)                      │
    │ 输出: (1, 256, 14, 14)              │
    └─────────────────────────────────────┘
    │
    ▼ 展平层: 4D→2D转换
    ┌─────────────────────────────────────┐
    │ view(-1, 256*14*14)                 │ ← 展平为向量
    │ 输出: (1, 50176)                    │ ← 一维特征向量
    └─────────────────────────────────────┘
    │
    ▼ 全连接层1: 特征整合
    ┌─────────────────────────────────────┐
    │ Linear(50176→512) + BatchNorm       │ ← 特征压缩
    │ ReLU + Dropout(50%)                 │
    │ 输出: (1, 512)                      │ ← 2500万参数!
    └─────────────────────────────────────┘
    │
    ▼ 全连接层2: 特征精炼
    ┌─────────────────────────────────────┐
    │ Linear(512→256) + BatchNorm         │ ← 进一步压缩
    │ ReLU + Dropout(50%)                 │
    │ 输出: (1, 256)                      │
    └─────────────────────────────────────┘
    │
    ▼ 全连接层3: 特征优化
    ┌─────────────────────────────────────┐
    │ Linear(256→128) + BatchNorm         │ ← 最终特征
    │ ReLU + Dropout(30%)                 │
    │ 输出: (1, 128)                      │
    └─────────────────────────────────────┘
    │
    ▼ 输出层: 分类决策
    ┌─────────────────────────────────────┐
    │ Linear(128→3)                       │ ← 分类层
    │ 输出: (1, 3)                        │ ← 原始分数
    └─────────────────────────────────────┘
    │
    ▼ Softmax归一化
    ┌─────────────────────────────────────┐
    │ 原始分数: [2.1, -0.5, 3.2]          │
    │ Softmax后: [0.1, 0.2, 0.7]         │ ← 概率分布
    │ 预测类别: 布 (索引2)                │ ← argmax结果
    │ 置信度: 70%                         │ ← 最大概率
    └─────────────────────────────────────┘
    """)

def show_ui_components():
    """展示用户界面组件"""
    
    print("\n" + "=" * 100)
    print("🖼️ 用户界面组件详解")
    print("=" * 100)
    
    print("""
    📺 主界面布局 (800×600像素)
    
    ┌─────────────────────────────────────────────────────────────────────────┐
    │                           实时视频窗口                                   │
    │  ┌──────────────────┐                    ┌─────────────────────────────┐ │
    │  │  信息面板        │                    │       检测区域框            │ │
    │  │ ┌─────────────── │                    │ ┌─────────────────────────┐ │ │
    │  │ │ 布 (paper)     │ ← 识别结果          │ │                         │ │ │
    │  │ │ 置信度: 87%    │ ← 置信度           │ │    Hand Gesture Area    │ │ │
    │  │ │ 状态: 识别成功  │ ← 状态信息          │ │                         │ │ │
    │  │ │               │                    │ │     👋 用户手势          │ │ │
    │  │ │ 概率分布:      │ ← 概率条形图        │ │                         │ │ │
    │  │ │ paper: ████▌   │ 87%               │ │                         │ │ │
    │  │ │ rock:  █       │ 8%                │ │                         │ │ │
    │  │ │ scissors: █    │ 5%                │ │                         │ │ │
    │  │ └───────────────── │                    │ └─────────────────────────┘ │ │
    │  └──────────────────┘                    └─────────────────────────────┘ │
    │                                                                           │
    │  底部信息栏:                                                               │
    │  按键: 'q'-退出, 's'-保存截图               FPS: 28.5                    │
    └─────────────────────────────────────────────────────────────────────────┘
    
    🎨 界面组件说明:
    
    1. 📋 信息面板 (左上角)
       ├── 半透明黑色背景 (70%透明度)
       ├── 主要识别结果 (大字体, 彩色)
       ├── 置信度百分比 (白色文字)
       ├── 识别状态信息 (成功/不足)
       └── 实时概率条形图
    
    2. 🎯 检测区域框 (右上角)
       ├── 双层绿色边框 (外粗内细)
       ├── 区域标题文字
       ├── 330×330像素大小
       └── 用户手势放置区域
    
    3. 📊 概率条形图
       ├── 三个类别的实时概率
       ├── 最高概率用绿色突出
       ├── 其他概率用灰色显示
       └── 百分比数值标注
    
    4. ℹ️ 状态信息
       ├── 置信度阈值判断 (>75%)
       ├── 成功: 绿色 "识别成功"
       ├── 不足: 橙色 "置信度不足"
       └── 动态颜色编码
    
    5. 🎮 交互控制
       ├── 'q' 键: 退出程序
       ├── 's' 键: 保存截图
       ├── FPS实时监控
       └── 操作提示显示
    """)

def show_performance_metrics():
    """显示性能指标"""
    
    print("\n" + "=" * 100)
    print("📈 系统性能指标")
    print("=" * 100)
    
    print("""
    ⚡ 实时性能:
    ├── 目标FPS: 30fps
    ├── 实际FPS: 25-30fps (取决于硬件)
    ├── 延迟: <100ms (单帧处理时间)
    └── 响应时间: 实时

    🧠 模型性能:
    ├── 参数数量: 26,244,675个
    ├── 模型大小: ~100MB
    ├── 推理时间: 20-50ms (GPU: RTX系列)
    ├── 内存占用: ~500MB (包含模型和缓存)
    └── 准确率: >95% (训练集)

    💾 内存使用:
    ├── 模型权重: ~100MB
    ├── 视频缓存: ~50MB
    ├── 历史记录: ~1MB
    ├── UI缓存: ~20MB
    └── 总计: ~200MB

    🔧 硬件要求:
    ├── 最低配置:
    │   ├── CPU: Intel i5 / AMD Ryzen 5
    │   ├── 内存: 4GB RAM
    │   ├── 摄像头: 720p 30fps
    │   └── 系统: Windows 10+
    │
    └── 推荐配置:
        ├── CPU: Intel i7 / AMD Ryzen 7
        ├── GPU: NVIDIA GTX 1060+ (CUDA支持)
        ├── 内存: 8GB+ RAM
        ├── 摄像头: 1080p 30fps
        └── 系统: Windows 11

    🎯 算法优化:
    ├── ROI提取: 只处理330×330检测区域
    ├── 时间平滑: 7帧历史记录平滑
    ├── GPU加速: CUDA自动检测和使用
    ├── 内存优化: 动态历史记录管理
    └── 异常处理: 完善的错误恢复机制
    """)

def main():
    """运行所有流程图解"""
    show_system_architecture()
    show_data_flow()
    show_smoothing_algorithm()
    show_cnn_processing()
    show_ui_components()
    show_performance_metrics()
    
    print("\n" + "=" * 100)
    print("🎉 实时手势检测系统完整解析完成!")
    print("=" * 100)
    
    print("""
    📝 系统总结:

    🏗️ 架构设计:
    采用模块化设计，职责分离清晰:
    - CNN模型类: 纯粹的神经网络定义
    - 检测器类: 封装所有业务逻辑
    - 主函数: 简洁的程序入口

    🔬 技术亮点:
    1. 深层CNN: 4层卷积+4层全连接，2600万参数
    2. 时间平滑: 动态权重加权平均，提升稳定性
    3. 实时处理: 30fps流畅检测，低延迟响应
    4. 智能UI: 概率可视化，置信度判断
    5. 工程优化: GPU加速，异常处理，资源管理

    💡 应用价值:
    - 教育演示: 展示深度学习实际应用
    - 技术验证: 验证CNN在实时视觉任务中的效果
    - 原型开发: 为更复杂系统提供基础框架
    - 交互体验: 直观的人机交互界面

    🚀 扩展可能:
    - 支持更多手势类别
    - 增加手势序列识别
    - 多人同时检测
    - 移动端部署优化
    - 云端API服务

    这个系统完美展示了从理论到实践的完整深度学习应用流程！
    """)

if __name__ == "__main__":
    main()
